// Generates the "src/rules.ts" file.

import fs from "node:fs";
import path from "node:path";
import {
  formatWithPrettier,
  getAutoGeneratedComment,
  getCamelCaseRuleName,
} from "./utils";

const SRC_DIRECTORY_PATH = path.join(__dirname, "..", "src");
const RULES_DIRECTORY_PATH = path.join(SRC_DIRECTORY_PATH, "rules");
const RULES_TS_PATH = path.join(SRC_DIRECTORY_PATH, "rules.ts");

export async function generateRules(): Promise<void> {
  const ruleNames = getRuleNames();
  const comment = getAutoGeneratedComment("rules");
  const code = getRulesCode(ruleNames);
  const combined = comment + code;
  const content = await formatWithPrettier(combined, "typescript");

  fs.writeFileSync(RULES_TS_PATH, content);
}

function getRuleNames(): string[] {
  const fileNames = fs.readdirSync(RULES_DIRECTORY_PATH);
  const ruleNames = fileNames.map((fileName) => fileName.replace(/\.ts$/, ""));
  ruleNames.sort();

  return ruleNames;
}

function getRulesCode(ruleNames: string[]) {
  let text = "";

  ruleNames.forEach((ruleName) => {
    const camelCaseRuleName = getCamelCaseRuleName(ruleName);
    text += `import { ${camelCaseRuleName} } from "./rules/${ruleName}";\n`;
  });

  text += "\n";
  text += "export const rules = {\n";

  ruleNames.forEach((ruleName) => {
    const camelCaseRuleName = getCamelCaseRuleName(ruleName);
    text += `  "${ruleName}": ${camelCaseRuleName},\n`;
  });

  text += "};\n";

  return text;
}
